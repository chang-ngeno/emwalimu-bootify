/*
 * Created on $today.date ( Time $today.time )
 * Generated by $generator.name ( version $generator.version )
 */
#set ( $uncapitalizedEntityName = ${fn.uncapitalize($entity.name)})
#set ( $keyAttribs = "" )
#set ( $keyParams = [] )
#foreach ( $key in $entity.keyAttributes )
#set ( $val = $keyParams.add("let $key.name = req.params.${fn.uncapitalize($key.name)};") )
#if ( $foreach.count > 1 )
#set ( $keyAttribs = $keyAttribs + ", " )
#end
#set ( $keyAttribs = $keyAttribs + $key.name )
#end

// Load $entity Data Access Object
const ${entity}Dao = require('../dao/${entity.name}Dao');

// Load Controller Common function
const ControllerCommon = require('./common/controllerCommon');

// Load $entity entity
const $entity = require('../model/${entity.name}');

/**
 * $entity.name Controller
 */
module.exports = class ${entity.name}Controller {

    constructor() {
        this.${uncapitalizedEntityName}Dao = new ${entity.name}Dao();
        this.common = new ControllerCommon();
    }

    /**
     * Tries to find an entity using its Id / Primary Key
     * @param req, res
     * @return findById response's code status and body
     */
    findById(req, res) {
#foreach ( $keyParam in $keyParams )
 		$keyParam
#end
        this.${uncapitalizedEntityName}Dao.findById(${keyAttribs})
            .then(this.common.getSuccess(res))
            .catch(this.common.noSuccess(res));
    };

    /**
     * Finds all entities.
     * @param res
     * @return findAll response's code status and body
     */
    findAll(res) {
        this.${uncapitalizedEntityName}Dao.findAll()
            .then(this.common.getSuccess(res))
            .catch(this.common.noSuccess(res));
    };

    /**
     * Count all entries of a ${entity.name}.
     * @param res
     * @return The number of entities
     */
    countAll(res) {
        this.${uncapitalizedEntityName}Dao.countAll()
            .then(this.common.getSuccess(res))
            .catch(this.common.noSuccess(res));
    };

    /**
     * Updates the given entity in the database
     * @param req, res
     * @return update response's code status and body
     */
    update(req, res) {
        let ${uncapitalizedEntityName} = new ${entity}();

#foreach ( $attrib in $entity.attributes)
#set ( $uncapitalizedAttribName = ${fn.uncapitalize($attrib.name)})
#if ($attrib.isKeyElement())
        ${uncapitalizedEntityName}.${uncapitalizedAttribName} = req.params.${uncapitalizedAttribName};
#else
        ${uncapitalizedEntityName}.${uncapitalizedAttribName} = req.body.${uncapitalizedAttribName};
#end
#end

        return this.${uncapitalizedEntityName}Dao.update(${uncapitalizedEntityName})
            .then(this.common.updateSuccess(res))
            .catch(this.common.noSuccess(res));
    };

    /**
     * Save the given entity in the database
     * @param req, res
     * @return save response's code status and body
     */
    save(req, res) {
        let ${uncapitalizedEntityName} = new ${entity}();

#foreach ( $attrib in $entity.attributes)
#set ( $uncapitalizedAttribName = ${fn.uncapitalize($attrib.name)})
        ${uncapitalizedEntityName}.${uncapitalizedAttribName} = req.body.${uncapitalizedAttribName};
#end

        return this.${uncapitalizedEntityName}Dao.save(${uncapitalizedEntityName})
            .then(this.common.saveSuccess(res))
            .catch(this.common.noSuccess(res));
    };

    /**
     * Creates the given entity in the database
     * @param req, res
     * @returns create response's code status and body
     */
    create(req, res) {
        let ${uncapitalizedEntityName} = new ${entity}();

#if ($entity.keyAttributes.size() > 0)
		if (${entity.keyAttributesNamesAsString(' && ', 'req.body.', '')}) {
#foreach ( $key in $entity.keyAttributes )
#set ( $uncapitalizedKeyAttribName = ${fn.uncapitalize($key.name)} )
 			${uncapitalizedEntityName}.${uncapitalizedKeyAttribName} = req.body.${uncapitalizedKeyAttribName};		
#end
		}
#end

#foreach ( $attrib in $entity.nonKeyAttributes )
#set ( $uncapitalizedAttribName = ${fn.uncapitalize($attrib.name)} )
 		${uncapitalizedEntityName}.${uncapitalizedAttribName} = req.body.${uncapitalizedAttribName};
#end

		return this.${uncapitalizedEntityName}Dao.create(${uncapitalizedEntityName})
                .then(this.common.createSuccess(res))
                .catch(this.common.noSuccess(res));
    };

    /**
     * Deletes an entity using its Id / Primary Key
     * @param req, res
     * @returns delete response's code status and body
     */
    deleteById(req, res) {
#foreach ( $keyParam in $keyParams )
 		$keyParam
#end
        this.${uncapitalizedEntityName}Dao.deleteById(${keyAttribs})
            .then(this.common.deleteSuccess(res))
            .catch(this.common.noSuccess(res));
    };

};