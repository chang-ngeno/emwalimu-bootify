#parse("/include/java_header.vm")
##------------------------------------------------------
package ${target.javaPackageFromFolder($TEST_SRC)};

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;

import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

/**
 * Generic abstract class for JPA JUnit test cases
 *  
 * @author Telosys
 */
public abstract class JpaTest {
	
	/**
	 * JPA Persistence Unit name for unit tests 
	 * Must be the same as in "src/test/resources/META-INF/persistence.xml"
	 */
	private static final String PERSISTENCE_UNIT_NAME = "h2-test";
	
	protected static EntityManagerFactory emf;
	protected static EntityManager em;

	/**
	 * Print message
	 * @param msg
	 */
	protected static void log(String msg) {
		System.out.println(msg);
	}
	
	@BeforeClass
	public static void setUpBeforeClass() throws Exception {
		log("@BeforeClass : Initializing JPA env...");
		// All database tables are created before each test case class 
		// thanks to 'persistence.xml' property "hibernate.hbm2ddl.auto" set to "create"
		emf = Persistence.createEntityManagerFactory(PERSISTENCE_UNIT_NAME);
	}

	@AfterClass
	public static void tearDownAfterClass() throws Exception {
		log("@AfterClass : Closing JPA env...");
		if ( emf != null ) {
	        emf.close();
		}
	}

	@Before
	public void setUpBeforeTest() throws Exception {
		log("@Before : em = emf.createEntityManager()...");
		em = emf.createEntityManager();
		log("@Before : DatabaseInit.init(em)...");
		DatabaseInit.init(em);
		log("@Before : initData()...");
		initData();
		log("@Before : em.clear()...");
    	em.clear();
	}

	@After
	public void tearDownAfterTest() throws Exception {
		if ( em != null ) {
			log("@After : Closing Entity Manager...");
			em.clear();
	        em.close();
		}
	}

	/**
	 * Initialization method called before each test <br>
	 * (to create referenced entities required for tests) 
	 */
	public abstract void initData();
	
    /**
     * Call em.persist(entity) in a transaction and call em.refresh(entity)
     * @param entity
     */
    protected void persistAndRefresh(Object entity) {
    	log("persistAndRefresh("+entity+")");
    	log(" persistAndRefresh : em.getTransaction().begin()");
    	em.getTransaction().begin();
    	log(" persistAndRefresh : em.persist(entity)");
    	em.persist(entity);
    	log(" persistAndRefresh : em.getTransaction().commit()");
    	em.getTransaction().commit();
    	log(" persistAndRefresh : em.refresh(entity)");
    	em.refresh(entity); // Useful to refresh links => SQL SELECT 
    }

    /**
     * Call em.merge(entity) in a transaction 
     * @param entity
     * @return the managed entity (object returned by JPA merge)
     */
    protected Object merge(Object entity) {
    	log("merge("+entity+")");
    	log(" merge : em.getTransaction().begin()");
    	em.getTransaction().begin();
    	log(" merge : em.merge(entity)");
    	Object managedEntity = em.merge(entity);
    	log(" merge : em.getTransaction().commit()");
    	em.getTransaction().commit();
    	return managedEntity;
    }

    /**
     * Call em.merge(entity) in a transaction and call em.refresh(entity)
     * @param entity
     * @return the managed entity (object returned by JPA merge)
     */
    protected Object mergeAndRefresh(Object entity) {
    	log("mergeAndRefresh("+entity+")");
    	log(" mergeAndRefresh : em.getTransaction().begin()");
    	em.getTransaction().begin();
    	log(" mergeAndRefresh : em.merge(entity)");
    	Object managedEntity = em.merge(entity);
    	log(" mergeAndRefresh : em.getTransaction().commit()");
    	em.getTransaction().commit();
    	log(" mergeAndRefresh : em.refresh(managedEntity)");
    	em.refresh(managedEntity); // Useful to refresh links => SQL SELECT 
    	return managedEntity;
    }

    /**
     * Call em.remove(entity) in a transaction 
     * @param entity
     */
    protected void remove(Object entity) {
    	log("remove("+entity+")");
    	log(" remove : em.getTransaction().begin()");
    	em.getTransaction().begin();
    	log(" remove : em.remove(entity)");
    	em.remove(entity);
    	log(" remove : em.getTransaction().commit()");
    	em.getTransaction().commit();
    }

    /**
     * Call em.find(entityClass, pk)
     * @param <T>
     * @param entityClass
     * @param pk
     * @return
     */
    protected <T> T find(Class<T> entityClass, Object pk) {
    	log("find : em.find(" + entityClass.getSimpleName() + ", " + pk +")");
    	T entity = em.find(entityClass, pk);
    	if ( entity != null ) {
        	log(" find : found ");
    	} else {
        	log(" find : not found");
    	}
    	return entity ;
    }
    
    /**
     * Call em.find(entityClass, pk) and call em.refresh(entity) if entity found
     * @param <T>
     * @param entityClass
     * @param pk
     * @return
     */
    protected <T> T findAndRefresh(Class<T> entityClass, Object pk) {
    	log("findAndRefresh : em.find(" + entityClass.getSimpleName() + ", " + pk +")");
    	T entity = em.find(entityClass, pk);
    	if ( entity != null ) {
        	log(" findAndRefresh : found => em.refresh(entity)");
        	em.refresh(entity); // Useful to refresh links => SQL SELECT 
    	} else {
        	log(" findAndRefresh : not found");
    	}
    	return entity ;
    }

}
